version: "3.8"

services:

  # Load Balancer
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend_network
      - frontend_network

  frontend:
      image: frontend_image:latest
      ports:
      - "8080:8080"
      deploy:
        restart_policy:
          condition: on-failure
      env_file:
        - ./.env
      networks:
        - frontend_network

  # Meal Service mit 5 Replikationen
  meal_service:
    image: meal_service_image:latest
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 2
        delay: 10s
    environment:
      - PORT=8001
    env_file:
      - ./.env
    networks:
      - backend_network
      - meal_network

  # User Service mit 5 Replikationen
  user_service:
    image: user_service_image:latest
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
    environment:
      - PORT=8002
    env_file:
      - ./.env
    networks:
      - backend_network
      - user_network

  # Sync Service mit 5 Replikationen
  sync_service:
    image: sync_service_image:latest
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
    environment:
      - PORT=8003
    networks:
      - backend_network

  # Datenbank für Meal Service
  meal-postgres:
      image: postgres:latest
      container_name: meal-postgres
      restart: always
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: meal_db
      ports:
        - "5433:5432"
      volumes:
        - meal_postgres_data:/var/lib/postgresql/data
        - ./backend/meal_service/database/mealdb.sql:/docker-entrypoint-initdb.d/init.sql
      deploy:
        replicas: 1
        restart_policy:
          condition: on-failure
      networks:
        - meal_network

  # Datenbank für User Service
  user-postgres:
    image: postgres:latest
    container_name: user-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: user_db
    ports:
      - "5434:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
      - ./backend/user_service/database/userdb.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - user_network

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - backend_network

volumes:
  meal_postgres_data:
  user_postgres_data:

networks:
  backend_network:
    driver: overlay
  meal_network:
    driver: overlay
  user_network:
    driver: overlay
  frontend_network:
    driver: overlay